import random
from datetime import datetime
from commands.db import register_users, getname, setname, bonus_db, getpofildb, getads, top_db, get_colvo_users, getstatus
from commands.main import geturl
from commands.main import win_luser
from commands.gettime import bonustime, kaznatime
from commands.assets.transform import transform


async def shar_cmd(message):
    list = ["–ú–æ–π –æ—Ç–≤–µ—Ç - –Ω–µ—Ç", "–ú–Ω–µ –∫–∞–∂–µ—Ç—Å—è - –¥–∞", "–°–µ–π—á–∞—Å –Ω–µ–ª—å–∑—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å", "–ú–Ω–µ –∫–∞–∂–µ—Ç—Å—è - –Ω–µ—Ç", "–ó–Ω–∞–∫–∏ –≥–æ–≤–æ—Ä—è—Ç - –Ω–µ—Ç", "–î–∞", "–ù–µ—Ç", "–ú–æ–∂–µ—à—å –±—ã—Ç—å —É–≤–µ—Ä–µ–Ω –≤ —ç—Ç–æ–º"]
    q = random.choice(list)
    await message.answer(f"{q}")


async def setname_cmd(message):
    user_name = await getname(message)
    user_id = message.from_user.id
    result = await win_luser()
    rwin, rloser = result
    url = geturl(user_id, user_name)
    try:
        name = " ".join(message.text.split()[2:])
    except:
        await message.answer(f'{url}, –≤–∞—à –Ω–∏–∫ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∫–æ—Ä–æ—á–µ 5 —Å–∏–º–≤–æ–ª–æ–≤ {rloser}', parse_mode='html')
        return

    name = name.replace('<', '').replace('>', '')
    if len(name) < 5:
        await message.answer(f'{url}, –≤–∞—à –Ω–∏–∫ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∫–æ—Ä–æ—á–µ 5 —Å–∏–º–≤–æ–ª–æ–≤ {rloser}', parse_mode='html')
        return
    if len(name) > 20:
        await message.answer(f'{url}, –≤–∞—à –Ω–∏–∫ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–ª–∏–Ω–Ω–µ–µ 20 —Å–∏–º–≤–æ–ª–æ–≤ {rloser}', parse_mode='html')
        return
    await setname(name, user_id)
    await message.answer(f'–í–∞—à –Ω–∏–∫ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ ¬´{name}¬ª', parse_mode='html')


async def kazna_cmd(message):
    await message.answer(
        f'üí∞ –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∫–∞–∑–Ω–∞ —à—Ç–∞—Ç–∞ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç 98.894.419.531.599.545$',
        parse_mode='html')


async def ogr_kazna(message):
    user_name = await getname(message)
    user_id = message.from_user.id
    url = await geturl(user_id, user_name)

    bt, left = await kaznatime(user_id)
    if bt == 1:
        await message.answer(
            f'{url}, –≤—ã —É–∂–µ –≥—Ä–∞–±–∏–ª–∏ –∫–∞–∑–Ω—É —Å–µ–≥–æ–¥–Ω—è. –ë–µ–≥–∏—Ç–µ —Å–∫–æ—Ä–µ–µ, –ø–æ–ª–∏—Ü–∏—è —É–∂–µ –≤ –ø—É—Ç–∏ üö´',
            parse_mode='html')
        return

    i = random.randint(1, 3)
    if i == 1:
        await message.answer(
            f'{url}, –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é –≤–∞–º –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–≥—Ä–∞–±–∏—Ç—å –∫–∞–∑–Ω—É ‚ùé',
            parse_mode='html')

    summ = random.randint(100000000, 400000000)
    summ2 = '{:,}'.format(summ).replace(',', '.')

    await bonus_db(user_id, 'users', 'balance', summ)
    await message.answer(
        f'{url}, –≤—ã —É—Å–ø–µ—à–Ω–æ –æ–≥—Ä–∞–±–∏–ª–∏ –∫–∞–∑–Ω—É. –ù–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å –∑–∞—á–∏—Å–ª–µ–Ω–æ {summ2} ‚úÖ',
        parse_mode='html')


async def bonus_cmd(message):
    user_name = await getname(message)
    user_id = message.from_user.id
    url = await geturl(user_id, user_name)

    bt, left = await bonustime(user_id)
    if bt == 1:
        hours = left // 3600
        minutes = (left % 3600) // 60
        if hours > 0:
            await message.answer(
                f'{url}, —Ç—ã —É–∂–µ –ø–æ–ª—É—á–∞–ª(-–∞) –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å, —Å–ª–µ–¥—É—é—â–∏–π –±–æ–Ω—É—Å —Ç—ã —Å–º–æ–∂–µ—à—å –ø–æ–ª—É—á–∏—Ç—å —á–µ—Ä–µ–∑ {hours}—á {minutes}–º',
                parse_mode='html')
        else:
            await message.answer(
                f'{url}, —Ç—ã —É–∂–µ –ø–æ–ª—É—á–∞–ª(-–∞) –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å, —Å–ª–µ–¥—É—é—â–∏–π –±–æ–Ω—É—Å —Ç—ã —Å–º–æ–∂–µ—à—å –ø–æ–ª—É—á–∏—Ç—å —á–µ—Ä–µ–∑ {minutes}–º',
                parse_mode='html')
        return
    i = random.randint(1, 4)
    if i == 1:
        table = 'users'
        v = 'balance'
        summ = random.randint(1000000, 4000000)
        summ2 = '{:,}'.format(summ).replace(',', '.')
        txt = f'–≤ —Ä–∞–∑–º–µ—Ä–µ {summ2}$ üí∞'
    elif i == 2:
        table = 'users'
        v = 'rating'
        summ = random.randint(100, 950)
        txt = f'–≤ —Ä–∞–∑–º–µ—Ä–µ {summ} —Ä–µ–π—Ç–∏–Ω–≥–∞ üëë'
    elif i == 3:
        table = 'users'
        v = 'case1'
        summ = random.randint(1, 10)
        txt = f'–≤ —Ä–∞–∑–º–µ—Ä–µ –æ–±—ã—á–Ω—ã–π –∫–µ–π—Å  - {summ} üì¶'
    else:
        table = 'mine'
        v = 'matter'
        summ = random.randint(1, 10)
        txt = f'–≤ —Ä–∞–∑–º–µ—Ä–µ {summ} –º–∞—Ç–µ—Ä–∏–∏ üåå'

    await bonus_db(user_id, table, v, summ)
    await message.answer(
        f'{url}, –≤–∞–º –±—ã–ª –≤—ã–¥–∞–Ω –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å {txt}',
        parse_mode='html')

async def profil_cmd(message):
    user_name = await getname(message)
    user_id = message.from_user.id
    url = await geturl(user_id, user_name)
    balance, btc, bank, ecoins, energy, exp, games, rating, dregister = await getpofildb(message)
    btc = await transform(btc)
    bank = await transform(bank)
    energy = await transform(energy)
    exp = await transform(exp)
    games = await transform(games)
    rating = await transform(rating)
    balance = await transform(balance)
    status = await getstatus(user_id)

    if status == 0:
        st = "–û–±—ã—á–Ω—ã–π"
    elif status == 1:
        st = "Standart VIP"
    elif status == 2:
        st = "Gold VIP"
    elif status == 3:
        st = "Platinum VIP"
    elif status == 4:
        st = "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"

    dregister = datetime.strptime(dregister, '%Y-%m-%d %H:%M:%S.%f')
    dregister = dregister.strftime('%Y-%m-%d –≤ %H:%M:%S')

    await message.answer(f'''{url}, –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å:
üîé ID: {user_id}
üèÜ –°—Ç–∞—Ç—É—Å: {st}
üí∞ –î–µ–Ω–µ–≥: {balance}$
üè¶ –í –±–∞–Ω–∫–µ: {bank}$
üí≥ B-Coins: {ecoins}
üíΩ –ë–∏—Ç–∫–æ–∏–Ω—ã: {btc}‡∏ø
üèã –≠–Ω–µ—Ä–≥–∏—è: {energy}
üëë –†–µ–π—Ç–∏–Ω–≥: {rating}
üåü –û–ø—ã—Ç: {exp}
üé≤ –í—Å–µ–≥–æ —Å—ã–≥—Ä–∞–Ω–æ –∏–≥—Ä: {games}

üì¶ –ò–º—É—â–µ—Å—Ç–≤–æ:
 üíº –ë–∏–∑–Ω–µ—Å: –ë–∏–∑–Ω–µ—Å
 üîã –§–µ—Ä–º–∞: –ú–∞–π–Ω–∏–Ω–≥ —Ñ–µ—Ä–º–∞

üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:
{dregister}''', parse_mode='html')


async def stats_cmd(message):
    users = await get_colvo_users()
    users = '{:,}'.format(users).replace(',', '.')

    await message.answer(f'''üìä –ö–æ–ª-–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞: {users}
üìä –û–±—â–µ–µ –∫–æ–ª-–≤–æ —á–∞—Ç–æ–≤: ???
üìä –û–±—â–µ–µ –∫–æ–ª-–≤–æ –∏–≥—Ä–æ–∫–æ–≤ –≤ –±–µ—Å–µ–¥–∞—Ö: ???''', parse_mode='html')


async def top_command(message):
    userinfo, top_players = await top_db(message)
    user_id = message.from_user.id
    ads = await getads(message)
    user_name = await getname(message)
    url = await geturl(user_id, user_name)

    user_position = None
    for i, player in enumerate(top_players, start=1):
        if player[0] == user_id:
            user_position = i
            break

    top_message = f"{url}, —Ç–æ–ø 10 –∏–≥—Ä–æ–∫–æ–≤:\n"
    emojis = ["1Ô∏è‚É£", "2Ô∏è‚É£", "3Ô∏è‚É£", "4Ô∏è‚É£", "5Ô∏è‚É£", "6Ô∏è‚É£", "7Ô∏è‚É£", "8Ô∏è‚É£", "9Ô∏è‚É£", "üîü"]

    # –û–≥—Ä–∞–Ω–∏—á–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–≤–æ–¥–∏–º—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ –¥–æ —Ç–æ–ø-10
    for i, player in enumerate(top_players[:10], start=1):
        tb = await transform(player[2])
        position_emoji = emojis[i - 1]
        top_message += f"{position_emoji} {player[1]} ‚Äî üëë{player[13]} | {tb}\n"

    top_message += f"‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî\n"

    if user_position is not None and user_position <= 10:
        tb = await transform(userinfo[2])
        position_emoji = emojis[user_position - 1]
        top_message += f"{position_emoji} {userinfo[1]} ‚Äî üëë{userinfo[13]} | {tb}"
    else:
        tb = await transform(userinfo[2])
        top_message += f"‚û°Ô∏è1Ô∏è‚É£0Ô∏è‚É£0Ô∏è‚É£ {userinfo[1]} ‚Äî üëë{userinfo[13]} | {tb}"

    top_message += f'\n\n{ads}'

    await message.answer(top_message, parse_mode='html', disable_web_page_preview=True)
