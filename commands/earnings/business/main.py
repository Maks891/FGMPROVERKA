from commands.earnings.business.db import *
from commands.db import register_users, getname, getonlibalance, getidname
from commands.main import geturl
from commands.main import win_luser
from commands.assets.kb import help_bsKB

async def business_list(message):
    id = message.from_user.id
    name = await getname(message)
    url = await geturl(id, name)
    await register_users(message)
    await message.answer(f'''{url}, —Ç–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Ä–µ—à–µ–Ω–∏—è —Å–∞–º –∏ –≤–ª–∏—è—Ç—å –Ω–∞ —Å–≤–æ–π –±–∏–∑–Ω–µ—Å.

ü™ì –î–ª—è –Ω–∞—á–∞–ª–∞ —è –ø—Ä–æ–≤–µ–¥—É —Ç–µ–±–µ –º–∞–ª–µ–Ω—å–∫–∏–π –∏–Ω—Å—Ç—Ä—É–∫—Ç–∞–∂ –ø–æ –ø–æ–≤–æ–¥—É –¥–∞–Ω–Ω—ã—Ö –±–∏–∑–Ω–µ—Å–æ–≤, —Ç—ã –Ω–µ –º–æ–∂–µ—à—å –ø—Ä–æ—Å—Ç–æ –∫—É–ø–∏—Ç—å –±–∏–∑–Ω–µ—Å –∏ –Ω–∞—á–∞—Ç—å –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –Ω—ë–º. –¢–µ–ø–µ—Ä—å –≤–∞–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–∞–º–æ–º—É –≤–ª–∏—è—Ç—å –Ω–∞ –¥–æ—Ö–æ–¥, —É–≤–µ–ª–∏—á–∏—Ç—å —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—é –±–∏–∑–Ω–µ—Å–∞, –∑–∞–∫—É–ø–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã –∏ –ø–ª–∞—Ç–∏—Ç—å –Ω–∞–ª–æ–≥–∏ –≤ –∫–∞–∑–Ω—É —à—Ç–∞—Ç–∞.

üèó –î–ª—è –Ω–∞—á–∞–ª–∞ –≤–∞–º –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –ø–ª–æ—â–∞–¥–∫—É –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –≤–æ–∑–≤–µ—Å—Ç–∏ –Ω–∞ –Ω–µ–π —Å–≤–æ–π –±–∏–∑–Ω–µ—Å. –î–ª—è —ç—Ç–æ–≥–æ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É "–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –±–∏–∑–Ω–µ—Å", –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ –≤–∞–º–∏ –±—É–¥–µ—Ç –∫—É–ø–ª–µ–Ω–∞ –º–∞–ª–µ–Ω—å–∫–∞—è —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è –ø–æ–¥ –±–∏–∑–Ω–µ—Å.

üí´ –î–∞–ª–µ–µ –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏ –ø–æ–º–æ—â–∏ –∫–æ–º–∞–Ω–¥ —É–ø—Ä–∞–≤–ª—è—Ç—å –±–∏–∑–Ω–µ—Å–æ–º, —É–≤–µ–ª–∏—á–∏–≤–∞—Ç—å –µ–≥–æ –¥–æ—Ö–æ–¥, –ø–æ–∫—É–ø–∞—Ç—å —É–ª—É—á—à–µ–Ω–∏—è –∏ –ø—Ä–æ—á–µ–µ. –ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É "–ü–æ–º–æ—â—å" –∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É.''', parse_mode='html')

async def my_business(message):
    id = message.from_user.id
    name = await getname(message)
    url = await geturl(id, name)
    result = await win_luser()
    rwin, rloser = result
    business, balance, nalogs, territory, bsterritory = await getbusiness(id)
    dox = 90000000 * bsterritory / 15
    balance = int(balance)
    nalogs = int(nalogs)
    dox = int(dox)
    balance = '{:,}'.format(balance).replace(',', '.')
    nalogs = '{:,}'.format(nalogs).replace(',', '.')
    territory = '{:,}'.format(territory).replace(',', '.')
    bsterritory = '{:,}'.format(bsterritory).replace(',', '.')
    dox = '{:,}'.format(dox).replace(',', '.')
    await register_users(message)
    if business == 0:
        await message.answer(f'{url}, —É –≤–∞—Å –Ω–µ—Ç —Å–≤–æ–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞ —á—Ç–æ–±—ã –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É "–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –±–∏–∑–Ω–µ—Å" {rloser}', parse_mode='html')
    else:
        await message.answer(f'''{url}, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–º –±–∏–∑–Ω–µ—Å–µ "–ë–∏–∑–Ω–µ—Å":
üß± –¢–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è: {territory} –º¬≤
üè¢ –¢–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è –±–∏–∑–Ω–µ—Å–∞: {bsterritory} –º¬≤
üí∏ –ù–∞–ª–æ–≥–∏: {nalogs}$/5.000.000$
üí∞ –ü—Ä–∏–±—ã–ª—å: {balance}$
üí∑ –î–æ—Ö–æ–¥: {dox}$''', parse_mode='html', reply_markup=help_bsKB)

async def buy_business(message):
    id = message.from_user.id
    name = await getname(message)
    url = await geturl(id, name)
    ferm = await getbusiness(id)
    result = await win_luser()
    rwin, rloser = result
    if ferm == 1:
        await message.answer(f'{url}, —É –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –ø–æ—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è –ø–æ–¥ –±–∏–∑–Ω–µ—Å. –ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ, –≤–≤–µ–¥–∏—Ç–µ "–ú–æ–π –±–∏–∑–Ω–µ—Å" {rloser}', parse_mode='html')
    else:
        balance = await getonlibalance(message)
        if balance < 500000000:
            await message.answer(f'{url}, —É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –¥–ª—è –ø–æ—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ –±–∏–∑–Ω–µ—Å–∞. –ï—ë —Å—Ç–æ–∏–º–æ—Å—Ç—å 500 –º–ª–Ω$ {rloser}', parse_mode='html')
        else:
            await buy_business_db(id)
            await message.answer(f'{url}, –≤—ã —É—Å–ø–µ—à–Ω–æ –ø–æ—Å—Ç—Ä–æ–∏–ª–∏ —Å–≤–æ–π –±–∏–∑–Ω–µ—Å –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π –≤–≤–µ–¥–∏—Ç–µ "–ú–æ–π –±–∏–∑–Ω–µ—Å" {rwin}', parse_mode='html')

async def buy_territory(call):
    id = call.from_user.id
    name = await getidname(id)
    url = await geturl(id, name)
    business = await getbusiness(id)
    result = await win_luser()
    rwin, rloser = result
    if business == 0:
        await call.message.answer(f'{url}, —É –≤–∞—Å –Ω–µ—Ç—É —Å–≤–æ–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞ —á—Ç–æ–±—ã —É–≤–µ–ª–∏—á–∏–≤–∞—Ç—å –µ–≥–æ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—é {rloser}', parse_mode='html')
    else:
        territory = await getterritory(id)
        ch = 22000000 * (1 + 0.15) ** (territory - 4)
        ch = int(ch)
        ch2 = '{:,}'.format(ch).replace(',', '.')
        balance = await getonlibalance(call)
        if balance < ch:
            await call.message.answer(f'{url}, —É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ —á—Ç–æ–±—ã —É–≤–µ–ª–∏—á–∏—Ç—å —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—é –±–∏–∑–Ω–µ—Å–∞ {rloser}', parse_mode='html')
        else:
            await buy_territory_db(id, ch)
            await call.message.answer(f'{url}, –≤—ã —É—Å–ø–µ—à–Ω–æ —É–≤–µ–ª–∏—á–∏–ª–∏ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—é –±–∏–∑–Ω–µ—Å–∞ –Ω–∞ 1 –º¬≤ –∑–∞ {ch2}$ {rwin}', parse_mode='html')

async def buy_bsterritory(call):
    id = call.from_user.id
    name = await getidname(id)
    url = await geturl(id, name)
    business = await getbusiness(id)
    result = await win_luser()
    rwin, rloser = result
    if business == 0:
        await call.message.answer(f'{url}, —É –≤–∞—Å –Ω–µ—Ç —Å–≤–æ–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞ —á—Ç–æ–±—ã —É–≤–µ–ª–∏—á–∏—Ç—å –±–∏–∑–Ω–µ—Å {rloser}', parse_mode='html')
    else:
        territory = await getterritory(id)
        bsterritory = await getbsterritory(id)
        if territory <= bsterritory:
            await call.message.answer(f'{url}, —á—Ç–æ–±—ã —É–≤–µ–ª–∏—á–∏—Ç—å –±–∏–∑–Ω–µ—Å –¥–ª—è –Ω–∞—á–∞–ª–∞ —É–≤–µ–ª–∏—á—å—Ç–µ –µ–≥–æ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—é {rloser}', parse_mode='html')
            return
        ch = 22000000 * (1 + 0.15) ** (bsterritory - 1)
        ch = int(ch)
        ch2 = '{:,}'.format(ch).replace(',', '.')
        balance = await getonlibalance(call)
        if balance < ch:
            await call.message.answer(f'{url}, —É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ —á—Ç–æ–±—ã —É–≤–µ–ª–∏—á–∏—Ç—å –±–∏–∑–Ω–µ—Å {rloser}', parse_mode='html')
        else:
            await buy_bsterritory_db(id, ch)
            await call.message.answer(f'{url}, –≤—ã —É—Å–ø–µ—à–Ω–æ —É–≤–µ–ª–∏—á–∏–ª–∏ –±–∏–∑–Ω–µ—Å –Ω–∞ 1 –º¬≤ –∑–∞ {ch2}$ {rwin}', parse_mode='html')

async def snyt_pribl_business(call):
    id = call.from_user.id
    name = await getidname(id)
    url = await geturl(id, name)
    business = await getbusiness(id)
    result = await win_luser()
    rwin, rloser = result
    if business == 0:
        await call.message.answer(f'{url}, —É –≤–∞—Å –Ω–µ—Ç —Å–≤–æ–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞ —á—Ç–æ–±—ã —Å–æ–±–∏—Ä–∞—Ç—å —Å –Ω–µ–≥–æ –ø—Ä–∏—ã–±–ª—å {rloser}', parse_mode='html')
    else:
        balance = await get_business_balance(id)
        balance2 = '{:,}'.format(balance).replace(',', '.')
        if balance == 0:
            await call.message.answer(f'{url}, –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–∞ –±–∞–ª–∞–Ω—Å–µ –≤–∞—à–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞ –Ω–µ—Ç –ø—Ä–∏–±—ã–ª–∏ {rloser}', parse_mode='html')
        else:
            await snyt_pribl_bs_db(id, balance)
            await call.message.answer(f'{url}, –≤—ã —É—Å–ø–µ—à–Ω–æ —Å–Ω—è–ª–∏ {balance2}$ —Å –±–∞–ª–∞–Ω—Å–∞ –≤–∞—à–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞ {rwin}', parse_mode='html')

async def oplata_nalogov_business(call):
    id = call.from_user.id
    name = await getidname(id)
    url = await geturl(id, name)
    business = await getbusiness(id)
    result = await win_luser()
    rwin, rloser = result
    if business == 0:
        await call.message.answer(f'{url}, —É –≤–∞—Å –Ω–µ—Ç —Å–≤–æ–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞ —á—Ç–æ–±—ã –ø–ª–∞—Ç–∏—Ç—å –∑–∞ –Ω–µ–≥–æ –Ω–∞–ª–æ–≥–∏ {rloser}', parse_mode='html')
    else:
        nalogs = await get_business_nalogs(id)
        nalogs2 = '{:,}'.format(nalogs).replace(',', '.')
        balance = await getonlibalance(call)
        if balance < nalogs:
            await call.message.answer(f'{url}, —É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ —á—Ç–æ–± –æ–ø–ª–∞—Ç–∏—Ç—å –Ω–∞–ª–æ–≥–∏ {rloser}', parse_mode='html')
            return
        if nalogs == 0:
            await call.message.answer(f'{url}, —É –≤–∞—Å –Ω–µ—Ç –Ω–∞–ª–æ–≥–æ–≤ —á—Ç–æ–±—ã –∏—Ö –æ–ø–ª–∞—Ç–∏—Ç—å {rwin}', parse_mode='html')
        else:
            await oplata_nalogs_bs_db(id, nalogs)
            await call.message.answer(f'{url}, –≤—ã —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—Ç–∏–ª–∏ –Ω–∞–ª–æ–≥–∏ –Ω–∞ —Å—É–º–º—É {nalogs2}$ —Å –≤–∞—à–µ–≥–æ –∏–≥—Ä–æ–≤–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞ {rwin}', parse_mode='html')
