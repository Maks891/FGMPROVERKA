from aiogram import types, Dispatcher
from bot import bot
from commands.earnings.quarry import db
from commands.db import url_name
from commands.main import win_luser
import commands.assets.kb as kb
from assets.antispam import new_earning_msg, antispam, antispam_earning


@antispam
async def quarry_list(message):
    await message.answer(f'''–ü—Ä–∏–≤–µ—Ç! üöÄ –ì–æ—Ç–æ–≤ –ø–æ–∫–æ—Ä–∏—Ç—å –º–∏—Ä –∫–∞—Ä—å–µ—Ä–æ–≤?

üõ† –ü–æ—Å—Ç—Ä–æ–π —Å–≤–æ–π –ø–µ—Ä–≤—ã–π –∫–∞—Ä—å–µ—Ä –≤—Å–µ–≥–æ –∑–∞ 25 –ø–∞–ª–ª–∞–¥–∏—è! –î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–ø–∏—à–∏ "<code>–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –∫–∞—Ä—å–µ—Ä</code>". –ü–∞–ª–ª–∞–¥–∏–π –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å, –æ—Ç–∫—Ä—ã–≤ —Ä—É–¥–Ω—ã–µ –∫–µ–π—Å—ã.

üåÑ –ö–∞–∫ —Ç–æ–ª—å–∫–æ –∫–∞—Ä—å–µ—Ä –±—É–¥–µ—Ç –ø–æ—Å—Ç—Ä–æ–µ–Ω:
1. –ù–∞—á–Ω–∏ –¥–æ–±—ã—á—É —Ä–µ—Å—É—Ä—Å–æ–≤.
2. –£–ª—É—á—à–∞–π –±—É—Ä–æ–≤—ã–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏, —á—Ç–æ–±—ã —É–≤–µ–ª–∏—á–∏–≤–∞—Ç—å –¥–æ–±—ã—á—É.
3. –†–∞—Å—à–∏—Ä—è–π —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—é –∫–∞—Ä—å–µ—Ä–∞ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–æ–≤–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è.

üìà –í–≤–µ–¥–∏ "–ú–æ–π –∫–∞—Ä—å–µ—Ä", —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è.

‚ùì –ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å –∏–ª–∏ —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã? –í–≤–µ–¥–∏ "<code>–ü–æ–º–æ—â—å</code>" –∏ –≤—ã–±–µ—Ä–∏ —Ä–∞–∑–¥–µ–ª "<code>–†–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–µ</code>".''')


@antispam
async def my_quarry(message):
    user_id = message.from_user.id
    url = await url_name(user_id)
    rwin, rloser = await win_luser()
    data = await db.getquarry(user_id)
    if not data:
        await message.answer(f'{url}, —É –≤–∞—Å –Ω–µ—Ç —Å–≤–æ–µ–≥–æ –∫–∞—Ä—å–µ—Ä–∞. –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É "–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –∫–∞—Ä—å–µ—Ä" {rloser}')
        return

    ter_upd = data[2] * 130
    bur_upd = data[2] * 166

    nalogs = '{:,}'.format((int(data[1]))).replace(',', '.')
    ter_upd = '{:,}'.format((int(ter_upd))).replace(',', '.')
    bur_upd = '{:,}'.format((int(bur_upd))).replace(',', '.')

    msg = await message.answer(f'''{url}, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–º –∫–∞—Ä—å–µ—Ä–µ "–ö–∞—Ä—å–µ—Ä":
üîß –£—Ä–æ–≤–µ–Ω—å: {data[4]}
üß± –†–∞–∑–º–µ—Ä —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏: {data[2]}–º¬≤
üÜô –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è: {ter_upd} üß™
üï≥ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—É—Ä–æ–≤—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–æ–∫: {data[3]}
üÜô –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è: {bur_upd} ‚öô

üí∏ –ù–∞–ª–æ–≥–∏: {nalogs}/5.000.000$''', reply_markup=kb.quarry(user_id))
    await new_earning_msg(msg.chat.id, msg.message_id)


async def edit_quarry_msg(call: types.CallbackQuery):
    user_id = call.from_user.id
    url = await url_name(user_id)
    data = await db.getquarry(user_id)
    if not data:
        return

    ter_upd = data[2] * 130
    bur_upd = data[2] * 166

    nalogs = '{:,}'.format((int(data[2]))).replace(',', '.')
    ter_upd = '{:,}'.format((int(ter_upd))).replace(',', '.')
    bur_upd = '{:,}'.format((int(bur_upd))).replace(',', '.')

    await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=f'''
{url}, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–º –∫–∞—Ä—å–µ—Ä–µ "–ö–∞—Ä—å–µ—Ä":
üîß –£—Ä–æ–≤–µ–Ω—å: {data[5]}
üß± –†–∞–∑–º–µ—Ä —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏: {data[3]}–º¬≤
üÜô –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è: {ter_upd} üß™
üï≥ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—É—Ä–æ–≤—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–æ–∫: {data[4]}
üÜô –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è: {bur_upd} ‚öô

üí∏ –ù–∞–ª–æ–≥–∏: {nalogs}/5.000.000$''', reply_markup=kb.quarry(user_id))


@antispam
async def buy_quarry(message):
    user_id = message.from_user.id
    url = await url_name(user_id)
    rwin, rloser = await win_luser()
    data = await db.getquarry(user_id)
    if data:
        await message.answer(f'{url}, —É –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –ø–æ—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –∫–∞—Ä—å–µ—Ä. –ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ, –≤–≤–µ–¥–∏—Ç–µ "–ú–æ–π –∫–∞—Ä—å–µ—Ä" {rloser}')
    else:
        balance = await db.getonlipalladium(user_id)
        if balance < 25:
            await message.answer(f'{url}, —É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–∞–ª–ª–∞–¥–∏—è –¥–ª—è –ø–æ—Å—Ç—Ä–æ–π–∫–∏ –∫–∞—Ä—å–µ—Ä–∞. –ï–≥–æ —Å—Ç–æ–∏–º–æ—Å—Ç—å 25 –ø–∞–ª–ª–∞–¥–∏—è {rloser}')
        else:
            await db.buy_quarry_db(user_id)
            await message.answer(f'{url}, –≤—ã —É—Å–ø–µ—à–Ω–æ –ø–æ—Å—Ç—Ä–æ–∏–ª–∏ –∫–∞—Ä—å–µ—Ä –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π –≤–≤–µ–¥–∏—Ç–µ "–ú–æ–π –∫–∞—Ä—å–µ—Ä" {rwin}')


def reg(dp: Dispatcher):
    dp.register_message_handler(my_quarry, lambda message: message.text.lower().startswith('–º–æ–π –∫–∞—Ä—å–µ—Ä'))
    dp.register_message_handler(quarry_list, lambda message: message.text.lower().startswith('–∫–∞—Ä—å–µ—Ä'))
    dp.register_message_handler(buy_quarry, lambda message: message.text.lower().startswith('–ø–æ—Å—Ç—Ä–æ–∏—Ç—å –∫–∞—Ä—å–µ—Ä'))
